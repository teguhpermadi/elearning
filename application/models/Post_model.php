<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Post_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }

    /*
     * Get post by id
     */
    function get_post($id)
    {
        return $this->db->get_where('posts', array('id' => $id))->row_array();
    }

    /*
     * Get all posts
     */
    function get_all_posts()
    {
        $this->db->order_by('id', 'desc');
        return $this->db->get('posts')->result_array();
    }

    function get_all_posts_by_user_id()
    {
        $user_id = user_info()['id'];
        return $this->db->get_where('posts', array('author_id' => $user_id))->result_array();
    }

    function get_all_posts_by_category_id($category_id)
    {
        return $this->db->select('*')
            ->from('post')
            ->join('post_category', 'post.id = post_category.post_id')
            ->where('post_category.category_id', $category_id)
            ->get()->result_array();
    }

    function get_all_posts_by_tag_id()
    {
    }

    /*
     * function to add new post
     */
    function add_post($params)
    {
        $this->db->insert('posts', $params);
        return $this->db->insert_id();
    }

    /*
     * function to update post
     */
    function update_post($id, $params)
    {
        $this->db->where('id', $id);
        return $this->db->update('posts', $params);
    }

    /*
     * function to delete post
     */
    function delete_post($id)
    {
        return $this->db->delete('posts', array('id' => $id));
    }

    // get user info
    function get_user($id)
    {
        return $this->db->get_where('users', array('id' => $id))->row_array();
    }

    function all_comment($post_id)
    {
        $all_users = $this->db->select('post_comment.*, users.first_name')
            ->from('post_comment')
            ->where('post_comment.post_id', $post_id)
            ->where('post_comment.parrent_id', 0)
            ->join('users', 'post_comment.author_id = users.id')
            ->order_by('post_comment.id', 'asc')
            ->get();
        return $all_users->result();
    }

    function count_comment($post_id)
    {
        $all_users = $this->db->select('post_comment.*')
            ->from('post_comment')
            ->where('post_comment.post_id', $post_id)
            ->where('post_comment.parrent_id', 0)
            ->order_by('post_comment.id', 'asc')
            ->get();
        return $all_users->num_rows();
    }

    function comment_replies($post_id, $comment_id)
    {
        $query = $this->db->select('*')
            ->from('post_comment')
            ->where('post_id', $post_id)
            ->where('parrent_id', $comment_id)
            ->join('users', 'post_comment.author_id = users.id')
            ->get();

        if ($query->num_rows() > 0) {
            return $query->result();
        } else {
            return false;
        }
    }

    function count_comment_replies($post_id, $comment_id)
    {
        $query = $this->db->select('*')
            ->from('post_comment')
            ->where('post_id', $post_id)
            ->where('parrent_id', $comment_id)
            ->get();

        return $query->num_rows();
    }

    function add_comment($params)
    {
        $this->db->insert('post_comment', $params);

        if ($this->db->affected_rows() > 0) {
            return true;
        } else {
            return false;
        }
    }

    function affected_comment($user_id, $comment)
    {
        $one_post = $this->db->select('post_comment.*, users.first_name')
            ->from('post_comment')
            ->where('author_id', $user_id)
            ->where('content', $comment)
            ->join('users', 'users.id = post_comment.author_id')
            ->order_by('id', 'DESC')
            ->limit(1)
            ->get();
        return $one_post->row();
    }

}
